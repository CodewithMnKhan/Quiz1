<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>C Programming Quiz</title>
  <!-- Google Font: Montserrat -->
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600&display=swap" rel="stylesheet">
  <style>
    /* Reset & Base Styles */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    body {
      font-family: 'Montserrat', sans-serif;
      background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
      color: #333;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 1rem;
    }
    .container {
      position: relative;
      z-index: 1;
      width: 100%;
      max-width: 800px;
      padding: 2rem;
      background: rgba(255, 255, 255, 0.8);
      border-radius: 20px;
      box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
      border: 1px solid rgba(255, 255, 255, 0.18);
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      min-height: 550px;
    }
    /* Animated Background */
    .animated-bg {
      position: fixed;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle at center, rgba(255,255,255,0.5), rgba(200,200,200,0.3));
      animation: bgMove 25s ease-in-out infinite;
      z-index: 0;
    }
    @keyframes bgMove {
      0% { transform: translate(0, 0) scale(1); }
      50% { transform: translate(20%, 20%) scale(1.1); }
      100% { transform: translate(0, 0) scale(1); }
    }
    /* Start Screen */
    .start-screen {
      text-align: center;
      animation: fadeIn 1s ease-in;
    }
    .start-screen h1 {
      font-size: 2.5rem;
      margin-bottom: 1rem;
      color: #4CAF50;
    }
    .rules {
      text-align: left;
      margin: 1rem auto 2rem;
      max-width: 500px;
      font-size: 1rem;
      color: #333;
      line-height: 1.5;
    }
    .rules h2 {
      font-size: 1.25rem;
      margin-bottom: 0.5rem;
      color: #333;
    }
    .rules ul {
      list-style: inside disc;
    }
    .start-btn {
      background: linear-gradient(45deg, #4CAF50, #66bb6a);
      color: #fff;
      border: none;
      padding: 1rem 2rem;
      font-size: 1.5rem;
      border-radius: 50px;
      cursor: pointer;
      transition: transform 0.3s, box-shadow 0.3s;
      animation: pulse 2s infinite;
      margin-top: 1.5rem;
    }
    .start-btn:hover {
      transform: scale(1.05);
      box-shadow: 0 0 20px rgba(76, 175, 80, 0.6);
    }
    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.05); }
    }
    /* Quiz Container (hidden by default) */
    .quiz-container {
      display: none; /* Shown after "Start Quiz" */
      animation: fadeIn 0.8s ease-in;
      flex-grow: 1;
      flex-direction: column;
      justify-content: space-between;
    }
    .quiz-top {
      /* Contains the question, timer, and options */
    }
    .question-number {
      font-size: 1.2rem;
      color: #777;
      margin-bottom: 0.5rem;
      text-align: center;
    }
    .question {
      font-size: 1.75rem;
      margin-bottom: 1.5rem;
      color: #333;
      text-align: center;
    }
    .options {
      display: grid;
      gap: 1rem;
    }
    .option {
      background: #f9f9f9;
      padding: 1rem;
      border-radius: 10px;
      cursor: pointer;
      transition: transform 0.3s, background 0.3s, box-shadow 0.3s;
      border: 2px solid transparent;
    }
    .option:hover,
    .option:focus {
      background: #ececec;
      transform: translateY(-3px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      outline: none;
    }
    /* Circular Timer Styles */
    .timer-circle {
      display: flex;
      justify-content: center;
      margin-bottom: 1rem;
    }
    .timer-circle svg {
      width: 100px;
      height: 100px;
    }
    .timer-text {
      font-size: 1.5rem;
      fill: #333;
    }
    /* Progress Bar at Bottom */
    .progress-bar {
      height: 8px;
      background: #ddd;
      border-radius: 5px;
      overflow: hidden;
      margin-top: 1rem;
    }
    .progress {
      height: 100%;
      background: #4CAF50;
      width: 0;
      transition: width 0.5s ease;
    }
    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      25% { transform: translateX(10px); }
      75% { transform: translateX(-10px); }
    }
    @keyframes glow {
      0%, 100% { box-shadow: 0 0 10px rgba(76, 175, 80, 0.7); }
      50% { box-shadow: 0 0 20px rgba(76, 175, 80, 0.7); }
    }
    /* Scoreboard */
    .scoreboard {
      display: none; /* Shown after quiz ends */
      text-align: center;
      animation: fadeIn 0.8s ease-in;
    }
    .scoreboard h2 {
      font-size: 2.5rem;
      color: #4CAF50;
      margin-bottom: 1rem;
    }
    /* Table for Final Results */
    .results-table {
      margin: 1rem auto;
      border-collapse: collapse;
      width: 90%;
      max-width: 500px;
      text-align: center;
    }
    .results-table th,
    .results-table td {
      border: 1px solid #ccc;
      padding: 0.75rem;
    }
    .results-table th {
      background: #f1f1f1;
    }
    .score {
      font-size: 4rem;
      color: #4CAF50;
      margin: 2rem 0;
      animation: glow 1s infinite;
    }
    .high-score {
      font-size: 1.5rem;
      color: #333;
      margin-bottom: 1rem;
    }
    /* Responsive Design */
    @media (max-width: 768px) {
      .question { font-size: 1.5rem; }
      .option { padding: 0.8rem; }
      .start-btn {
        font-size: 1.2rem;
        padding: 0.8rem 1.5rem;
      }
      .results-table th,
      .results-table td {
        font-size: 0.9rem;
        padding: 0.5rem;
      }
    }
  </style>
</head>
<body>
  <!-- Animated background -->
  <div class="animated-bg"></div>

  <div class="container">
    <!-- START SCREEN -->
    <div class="start-screen">
      <h1>C Programming Quiz</h1>
      <!-- QUIZ RULES HERE -->
      <div class="rules">
        <h2>Quiz Rules:</h2>
        <ul>
          <li>There are <strong>20 questions</strong> in total.</li>
          <li>You get <strong>1 mark</strong> for each correct answer.</li>
          <li>For each wrong or timed-out answer, <strong>0.25</strong> mark is deducted from your total.</li>
          <li>You have <strong>10 seconds</strong> to answer each question.</li>
          <li>A <strong>click sound</strong> will play whenever you select an option.</li>
          <li>If you select a wrong answer, your device will <strong>vibrate</strong> (where supported).</li>
          <li>Your final score and breakdown will be shown at the end.</li>
        </ul>
      </div>
      <button class="start-btn" onclick="startQuiz()">Start Quiz</button>
    </div>

    <!-- QUIZ CONTAINER (Hidden until user starts) -->
    <div class="quiz-container">
      <div class="quiz-top">
        <!-- Timer Circle -->
        <div class="timer-circle" aria-live="polite">
          <svg>
            <circle class="timer-bg" cx="50" cy="50" r="45" fill="none" stroke="#ddd" stroke-width="10"></circle>
            <circle class="timer-progress" cx="50" cy="50" r="45" fill="none" stroke="#4CAF50" stroke-width="10"
              stroke-dasharray="282.743" stroke-dashoffset="0"></circle>
            <text x="50%" y="50%" text-anchor="middle" dy=".3em" class="timer-text" id="timerText">10</text>
          </svg>
        </div>

        <!-- Question Info -->
        <div class="question-number" aria-live="polite"></div>
        <div class="question" aria-live="polite"></div>
        <div class="options"></div>
      </div>
      <!-- Progress Bar at the bottom -->
      <div class="progress-bar">
        <div class="progress"></div>
      </div>
    </div>

    <!-- SCOREBOARD (Hidden until quiz ends) -->
    <div class="scoreboard">
      <h2>Quiz Complete!</h2>
      <!-- We'll display the final numeric score here -->
      <div class="score">0</div>
      <div class="high-score">High Score: 0</div>

      <!-- Detailed Results Table -->
      <table class="results-table">
        <thead>
          <tr>
            <th>Total Questions</th>
            <th>Correct</th>
            <th>Wrong</th>
            <th>Negative Marking</th>
            <th>Final Score</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td id="totalQuestionsCell"></td>
            <td id="correctCell"></td>
            <td id="wrongCell"></td>
            <td id="negativeMarkCell"></td>
            <td id="finalScoreCell"></td>
          </tr>
        </tbody>
      </table>

      <button class="start-btn" onclick="restartQuiz()">Restart Quiz</button>
    </div>
  </div>

  <script>
    "use strict";

    /***************************************************************
     * 1. OPTIONAL: PRE-LOAD OR DEFINE YOUR AUDIO FILE(S)
     ***************************************************************/
    // Replace 'click.mp3' with the actual path to your audio file.
    function playClickSound() {
      const audio = new Audio('click.mp3');
      audio.play().catch(err => {
        // Some browsers block autoplay without user interaction
        console.warn('Audio play blocked:', err);
      });
    }

    /***************************************************************
     * 2. QUIZ DATA & SHUFFLE
     ***************************************************************/
    function getQuestions() {
      return [
        
  {
    question: "What is Node.js?",
    options: [
      "A JavaScript framework",
      "A JavaScript runtime built on Chrome's V8 engine",
      "A front-end library",
      "A type of database"
    ],
    correct: 1
  },
  {
    question: "Which of the following is true about Node.js?",
    options: [
      "It is single-threaded",
      "It is multi-threaded",
      "It does not support asynchronous programming",
      "It is used only for frontend development"
    ],
    correct: 0
  },
  {
    question: "What module is used to create an HTTP server in Node.js?",
    options: ["fs", "http", "url", "path"],
    correct: 1
  },
  {
    question: "Which command is used to initialize a new Node.js project?",
    options: ["node init", "npm start", "npm init", "node new"],
    correct: 2
  },
  {
    question: "What is the default package manager for Node.js?",
    options: ["Bower", "Yarn", "NPM", "Composer"],
    correct: 2
  },
  {
    question: "Which of the following is not a built-in module in Node.js?",
    options: ["fs", "http", "express", "path"],
    correct: 2
  },
  {
    question: "How do you import a module in Node.js?",
    options: [
      "import module from 'module'",
      "require('module')",
      "include 'module'",
      "load('module')"
    ],
    correct: 1
  },
  {
    question: "Which function is used to read a file synchronously in Node.js?",
    options: ["fs.readFileSync()", "fs.readFile()", "fs.openFileSync()", "fs.loadFile()"],
    correct: 0
  },
  {
    question: "What is the role of the 'event loop' in Node.js?",
    options: [
      "It blocks execution until all tasks are completed",
      "It handles asynchronous operations in a non-blocking way",
      "It stops the execution of JavaScript code",
      "It runs only one function at a time"
    ],
    correct: 1
  },
  {
    question: "How can you make an asynchronous function synchronous in Node.js?",
    options: [
      "By using await inside an async function",
      "By using sync keyword",
      "By using setTimeout()",
      "By calling the function multiple times"
    ],
    correct: 0
  },
  {
    question: "Which method is used to serve static files in an Express.js application?",
    options: [
      "express.static()",
      "app.static()",
      "express.serve()",
      "app.serve()"
    ],
    correct: 0
  },
  {
    question: "What is the purpose of the package.json file in a Node.js project?",
    options: [
      "It contains the code for the application",
      "It manages project dependencies and metadata",
      "It stores environment variables",
      "It configures the Node.js runtime"
    ],
    correct: 1
  },
  {
    question: "Which of the following is a popular template engine for Node.js?",
    options: ["EJS", "Pug", "Handlebars", "All of the above"],
    correct: 3
  },
  {
    question: "Which module provides utility functions for working with file and directory paths?",
    options: ["fs", "path", "url", "util"],
    correct: 1
  },
  {
    question: "What is the purpose of the 'require' function in Node.js?",
    options: [
      "To load modules",
      "To create HTTP servers",
      "To compile JavaScript code",
      "To manage processes"
    ],
    correct: 0
  },
  {
    question: "Which Node.js module is used for stream operations?",
    options: ["stream", "buffer", "http", "url"],
    correct: 0
  },
  {
    question: "Which of the following is true about callbacks in Node.js?",
    options: [
      "They are executed immediately",
      "They handle asynchronous operations",
      "They block the event loop",
      "They are used only in Express.js"
    ],
    correct: 1
  },
  {
    question: "What is a promise in Node.js?",
    options: [
      "A way to handle synchronous operations",
      "A way to store data in memory",
      "A mechanism to handle asynchronous operations",
      "A method to declare variables"
    ],
    correct: 2
  },
  {
    question: "What is the primary purpose of the 'fs' module in Node.js?",
    options: [
      "To handle file system operations",
      "To manage network connections",
      "To provide cryptographic functions",
      "To handle HTTP requests"
    ],
    correct: 0
  },
  {
    question: "Which of the following is a framework built on top of Node.js?",
    options: [
      "React",
      "Angular",
      "Express",
      "Vue"
    ],
    correct: 2
  }

      ];
    }

    // Fisher-Yates shuffle
    function shuffle(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    }

    /***************************************************************
     * 3. LOAD QUESTIONS WITH SESSION STORAGE
     ***************************************************************/
    let questions;
    if (sessionStorage.getItem('questions')) {
      questions = JSON.parse(sessionStorage.getItem('questions'));
    } else {
      questions = shuffle(getQuestions());
      sessionStorage.setItem('questions', JSON.stringify(questions));
    }

    /***************************************************************
     * 4. QUIZ VARIABLES
     ***************************************************************/
    let currentQuestion = 0;
    let score = 0;            // Number of correct answers
    let wrongCount = 0;       // Number of wrong/time-out answers
    const totalQuestions = questions.length; // Should be 10 by default
    const questionTime = 10;  // seconds per question
    let timeLeft = questionTime;
    let timerInterval;

    // For circular timer
    const radius = 45;
    const circumference = 2 * Math.PI * radius;
    const timerProgressCircle = document.querySelector('.timer-progress');
    timerProgressCircle.style.strokeDasharray = circumference;
    timerProgressCircle.style.strokeDashoffset = 0;

    // DOM elements
    const questionNumberElement = document.querySelector('.question-number');
    const questionElement = document.querySelector('.question');
    const optionsElement = document.querySelector('.options');
    const progressElement = document.querySelector('.progress');
    const timerTextElement = document.getElementById('timerText');
    const quizContainer = document.querySelector('.quiz-container');
    const startScreen = document.querySelector('.start-screen');
    const scoreboard = document.querySelector('.scoreboard');
    const scoreElement = document.querySelector('.score');
    const highScoreElement = document.querySelector('.high-score');

    // Table cells in scoreboard
    const totalQuestionsCell = document.getElementById('totalQuestionsCell');
    const correctCell = document.getElementById('correctCell');
    const wrongCell = document.getElementById('wrongCell');
    const negativeMarkCell = document.getElementById('negativeMarkCell');
    const finalScoreCell = document.getElementById('finalScoreCell');

    // High score from localStorage
    let highScore = localStorage.getItem('highScore') ? parseInt(localStorage.getItem('highScore')) : 0;
    highScoreElement.textContent = `High Score: ${highScore}`;

    /***************************************************************
     * 5. CORE QUIZ FUNCTIONS
     ***************************************************************/
    function startQuiz() {
      // Hide start screen, show quiz
      startScreen.style.display = 'none';
      quizContainer.style.display = 'flex';
      currentQuestion = 0;
      score = 0;
      wrongCount = 0;

      showQuestion();
      updateProgress();
      startTimer();
    }

    function showQuestion() {
      // Reset timer for new question
      resetTimer();
      timeLeft = questionTime;
      updateTimerDisplay();

      const q = questions[currentQuestion];
      questionNumberElement.textContent = `Question ${currentQuestion + 1} of ${totalQuestions}`;
      questionElement.textContent = q.question;

      // Shuffle the options for this question
      const optionsData = q.options.map((option, index) => ({
        text: option,
        isCorrect: index === q.correct
      }));
      const shuffledOptions = shuffle(optionsData.slice());

      // Rebuild the .options container
      optionsElement.innerHTML = "";
      shuffledOptions.forEach(optionObj => {
        const optionDiv = document.createElement("div");
        optionDiv.className = "option";
        optionDiv.setAttribute("role", "button");
        optionDiv.setAttribute("tabindex", "0");
        optionDiv.textContent = optionObj.text;
        optionDiv.dataset.correct = optionObj.isCorrect;

        // 1) Play a click sound on selection
        // 2) Then check correctness
        optionDiv.addEventListener("click", () => {
          playClickSound();
          checkAnswer(optionDiv);
        });

        // For keyboard accessibility (Enter key)
        optionDiv.addEventListener("keydown", e => {
          if (e.key === "Enter") {
            playClickSound();
            checkAnswer(optionDiv);
          }
        });

        optionsElement.appendChild(optionDiv);
      });
    }

    function checkAnswer(selectedElement) {
      stopTimer();
      const allOptions = document.querySelectorAll('.option');
      allOptions.forEach(opt => (opt.style.pointerEvents = 'none'));

      if (selectedElement === -1) {
        // Timer expired => wrong
        wrongCount++;
        allOptions.forEach(opt => {
          if (opt.dataset.correct === "true") {
            opt.style.border = '2px solid #4CAF50';
          }
        });
      } else {
        // If user selected an option
        if (selectedElement.dataset.correct === "true") {
          // Mark correct
          selectedElement.style.border = '2px solid #4CAF50';
          selectedElement.style.animation = 'glow 0.5s';
          score++;
        } else {
          // Mark wrong
          wrongCount++;
          selectedElement.style.border = '2px solid #f44336';
          selectedElement.style.animation = 'shake 0.5s';

          // Vibrate on wrong
          if (navigator.vibrate) {
            navigator.vibrate(200); // vibrate for 200ms
          }

          // highlight correct
          allOptions.forEach(opt => {
            if (opt.dataset.correct === "true") {
              opt.style.border = '2px solid #4CAF50';
            }
          });
        }
      }

      // Next question or scoreboard
      setTimeout(() => {
        currentQuestion++;
        if (currentQuestion < totalQuestions) {
          showQuestion();
          updateProgress();
          startTimer();
        } else {
          showScore();
        }
      }, 1500);
    }

    function updateProgress() {
      const progress = (currentQuestion / totalQuestions) * 100;
      progressElement.style.width = `${progress}%`;
    }

    /***************************************************************
     * 6. TIMER FUNCTIONS
     ***************************************************************/
    function startTimer() {
      timerInterval = setInterval(() => {
        timeLeft--;
        updateTimerDisplay();
        if (timeLeft <= 0) {
          stopTimer();
          checkAnswer(-1); // -1 means time ran out
        }
      }, 1000);
    }

    function resetTimer() {
      clearInterval(timerInterval);
    }

    function stopTimer() {
      clearInterval(timerInterval);
    }

    function updateTimerDisplay() {
      timerTextElement.textContent = timeLeft;
      const offset = circumference * (1 - timeLeft / questionTime);
      timerProgressCircle.style.strokeDashoffset = offset;
    }

    /***************************************************************
     * 7. SCOREBOARD & RESTART
     ***************************************************************/
    function showScore() {
      quizContainer.style.display = 'none';
      scoreboard.style.display = 'block';

      // Calculate final score with negative marking
      const finalScore = score - (wrongCount * 0.25);

      // Animate final score count-up (optional, integer only)
      // For fractional, we’ll just show the final directly:
      scoreElement.textContent = finalScore.toFixed(2);

      // Fill the table cells
      totalQuestionsCell.textContent = totalQuestions;
      correctCell.textContent = score;
      wrongCell.textContent = wrongCount;
      negativeMarkCell.textContent = (wrongCount * 0.25).toFixed(2);
      finalScoreCell.textContent = finalScore.toFixed(2);

      // Update high score if needed
      if (finalScore > highScore) {
        localStorage.setItem('highScore', finalScore);
        highScore = finalScore;
        highScoreElement.textContent = `High Score: ${finalScore.toFixed(2)}`;
      }
    }

    function restartQuiz() {
      // Clear session questions so it re-shuffles next time
      sessionStorage.removeItem('questions');
      location.reload();
    }
  </script>
</body>
</html>